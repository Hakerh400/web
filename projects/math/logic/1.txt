axiom bool.exhaust: ∀P a. (a = False  ⟶  P)  ⟶  (a = True  ⟶  P)  ⟶  P
axiom bool.dif.False.True: ∀P a. a = False  ⟶  a = True  ⟶  P

axiom true: True

def (¬): λa. a  ⟶  False

lemma not_def: ∀P. ¬P = (P  ⟶  False)
  % subst[λx. x P] (¬).def

lemma not_defP_1: ∀P. ¬P  ⟶  P  ⟶  False
  % substP not_def[P] 1 2

lemma not_defP_2: ∀P. (P  ⟶  False)  ⟶  ¬P
  * eq_com not_def[P]
  % substP 2 1

lemma falI: ∀P. P  ⟶  ¬P  ⟶  False
  % not_defP_1 2 1

lemma falE: ∀P. False  ⟶  P
  * bool.exhaust[False  ⟶  P, P]
  % 2
  * eq_com 2
  % substP 2 1
  * eq_com 2
  % substP 2 true
  % 1

lemma notI: ∀P. (P  ⟶  False)  ⟶  ¬P
  * eq_com not_def[P]
  % substP 2 1

lemma nfalse: ¬False
  % notI
  % 1

lemma false_neq_true: ¬ (False = True)
  % notI
  * eq_com 1
  % substP 1 true

lemma true_impl_nfalse: True  ⟶  ¬False
  % nfalse

lemma false_impl_ntrue: False  ⟶  ¬True
  % falE 1

lemma ntrue_impl_false: ¬True  ⟶  False
  % not_defP_1 1 true

lemma nfalse_impl_true: ¬False  ⟶  True
  % true

lemma impl_refl: ∀P. P  ⟶  P
  % 1

lemma notE: ∀P. ¬¬P  ⟶  P
  * not_def 1
  * not_defP_1 1
  * subst[λx. x  ⟶  False] not_def 1
  % bool.exhaust [P]
  * subst[λx. (x  ⟶  False)  ⟶  False] 2 1
  * 1 impl_refl
  % falE
  * eq_com 2
  % substP 2 true